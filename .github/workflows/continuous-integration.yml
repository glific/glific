name: Continuous Integration

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13 # postgres image for test database.
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: glific_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      MIX_ENV: test
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix: # build matrix for the job
        elixir: [1.13.4]
        otp: [24.3.4]

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup elixir
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v1
        id: elixir-mix-cache #id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-v2.3-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Install Mix Dependencies if not Cached
        if: steps.elixir-mix-cache.outputs.cache-hit != 'true'
        run: |
          # mix local.rebar --force
          mix local.hex --force
          mix hex.repo add oban https://getoban.pro/repo \
           --fetch-public-key SHA256:4/OSKi0NRF91QVVXlGAhb/BIMLnK8NHcx/EWs+aIWPc \ 
           --auth-key ${{ secrets.OBAN_PRO_KEY }}
          mix hex.organization auth oban --key ${{ secrets.OBAN_PRO_KEY }}
          mix deps.get

      - name: Retrieve PLT Cache
        uses: actions/cache@v1
        id: elixir-plt-cache #id to use in retrieve action
        with:
          path: priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-v2.3-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Create PLTs
        if: steps.elixir-plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt

      - name: Run check
        run: mix check

      - name: Coveralls for code covarage
        run: mix do compile --warnings-as-errors, coveralls.json

      - name: Code coverage
        run: bash <(curl -s https://codecov.io/bash)
